---
- name: Install the ntpsec and postfix daemons
  # Default bookworm installation has systemd-timesyncd installed
  # It also solve issue when chrony or openntpd is installed
  ansible.builtin.apt:
    name:
      - ntpsec
      - postfix
    state: present

- name: Ensure sendmail is absent
  ansible.builtin.apt:
    name: sendmail-bin
    state: absent

- name: "Install {{ wazo_meta_package }}"
  ansible.builtin.apt:
    name: "{{ wazo_meta_package }}"
    state: present

- name: Install wazo-setupd
  ansible.builtin.apt:
    name: wazo-setupd
    state: present

- name: Ensure wazo-setupd has been started with last config
  ansible.builtin.service:
    name: wazo-setupd
    state: restarted

- name: Ensure that asterisk has been started with wazo-confgend config
  ansible.builtin.service:
    name: asterisk
    state: restarted

- name: Change Wazo distribution for later upgrades # noqa no-changed-when
  ansible.builtin.command: wazo-dist --{{ wazo_debian_repo_upgrade }}-repo {{ wazo_distribution_upgrade }}
  when: debian_repo_wazo__custom_repo is not defined

- name: Remove custom GPG key used for installation
  ansible.builtin.apt_key:
    id: "{{ debian_repo_wazo__key_id }}"
    state: absent
    keyring: /etc/apt/trusted.gpg.d/wazo-keyring-installation.gpg

- name: Remove empty keyring file used for installation
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/apt/trusted.gpg.d/wazo-keyring-installation.gpg
    - /etc/apt/trusted.gpg.d/wazo-keyring-installation.gpg~

- name: Remove custom repository used for installation
  ansible.builtin.apt_repository:
    repo: "{{ debian_repo_wazo__custom_repo }}"
    state: absent
    filename: "{{ debian_repo_wazo__custom_repo_filename }}"
    update_cache: true
  when: debian_repo_wazo__custom_repo_upgrade is defined

- name: Add custom repository for later upgrades
  ansible.builtin.apt_repository:
    repo: "{{ debian_repo_wazo__custom_repo_upgrade }}"
    state: present
    filename: "{{ debian_repo_wazo__custom_repo_filename }}"
    update_cache: true
  when: debian_repo_wazo__custom_repo_upgrade is defined

- name: Ensure dbus is started
  ansible.builtin.service:
    name: dbus
    state: started

- name: Finalize engine configuration
  when: engine_api_configure_wizard == "true"
  block:
    - name: Setup engine
      ansible.builtin.uri:
        url: "https://{{ engine_api_host }}:{{ engine_api_port }}{{ engine_setupd_path }}/setup"
        method: POST
        timeout: 300
        validate_certs: false
        body_format: json
        body:
          engine_internal_address: "{{ engine_api_host }}"
          engine_language: "{{ engine_language }}"
          engine_license: true
          engine_password: "{{ engine_api_root_password | string }}"
        status_code: 201

    - name: Create tenant
      ansible.builtin.command: "wazo-auth-cli tenant create {{ tenant_name }}"
      changed_when: true

    - name: Create API client
      ansible.builtin.command: |
        wazo-auth-cli user create {{ api_client_name }} \
          --tenant {{ tenant_name }} --password {{ api_client_password }} --purpose external_api
      changed_when: true

    - name: Create policy
      ansible.builtin.command: "wazo-auth-cli policy create api-client-policy --tenant {{ tenant_name }} --acl 'confd.#'"
      changed_when: true

    - name: Enable policy for API client
      ansible.builtin.command: "wazo-auth-cli user add {{ api_client_name }} --policy api-client-policy"
      changed_when: true
